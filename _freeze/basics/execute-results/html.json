{
  "hash": "8595d32b296583d10438a2ca13e72c43",
  "result": {
    "markdown": "---\ntitle: \"R Basics\"\neditor: visual\n---\n\n\n## Getting to know RStudio\n\nWhen you first open RStudio, it is split into 3 panels:\n\n-   **The Console** (left), where you can directly type and run code (by hitting Enter)\n-   **The Environment/History pane** (upper-right), where you can view the objects you currently have stored in your environment and a history of the code you've run\n-   **The Files/Plots/Packages/Help pane** (lower-right), where you can search for files, view and save your plots, view and manage what packages are loaded in your library and session, and get R help\n\n![Image Credit: Software Carpentry](https://swcarpentry.github.io/r-novice-gapminder/fig/01-rstudio.png){width=\"100%\"}\n\nTo write and save code you use scripts. You can open a new script with File -\\> New File or by clicking the icon with the green plus sign in the upper left corner. When you open a script, RStudio then opens a fourth **'Source' panel** in the upper-left to write and save your code. You can also send code from a script directly to the console to execute it by highlighting the code line/chunk (or place your cursor at the end of the code chunk) and hit CTRL+ENTER on a PC or CMD+ENTER on a Mac.\n\n![Image Credit: Software Carpentry](https://swcarpentry.github.io/r-novice-gapminder/fig/01-rstudio-script.png)\n\nIt is good practice to add comments/notes throughout your scripts to document what the code is doing. To do this start a line with a `#`. R knows to ignore everything after a `#`, so you can write whatever you want there.\n\n### Functions\n\nR has many built in functions to perform various tasks. To run these functions you type the function name followed by parentheses. Within the parentheses you put in your specific arguments needed to run the function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# mathematical functions with numbers\nlog(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.302585\n```\n:::\n\n```{.r .cell-code}\n# a range of numbers\nmean(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\n# nested functions for a string of numbers, using the concatenate function 'c'\nmean(c(1,2,3,4,5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\n# functions with characters\nprint(\"Hello World\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello World\"\n```\n:::\n\n```{.r .cell-code}\npaste(\"Hello\", \"World\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello World\"\n```\n:::\n:::\n\n\n### Packages\n\nR Packages include reusable functions that are not built-in with R. To use these functions, you must install the package to your local system with the `install.packages()` function. Once a package is installed on your computer you don't need to install it again. Anytime you want to use the package in a new R session you just load it with the `library()` function. Go to the [Getting Started](setup.qmd) page to walk through installing and loading the R packages needed for this workshop.\n\n#### The Tidyverse\n\nYou may hear the word \"tidy\" a lot throughout this workshop, which is referring to the **Tidyverse**. The Tidyverse is a collection of R packages designed for data manipulation, exploration, and visualization that you are likely to use in every day data analysis. They all use the same design philosophy, grammar, and data structures. When you install the Tidyverse, it installs all of these packages, and you can then load all of them in your R session with `library(tidyverse)`. For this course, we are using Tidyverse packages `dplyr`, `tidyr`, and `readr` and installing them individually instead of the entire Tidyverse suite of packages. You can learn more about the Tidyverse and the packages it includes here: <https://www.tidyverse.org/>.\n\n## Beginner Lessons/Tutorials\n\nIf you are brand new to R (or even if you have some experience) please read/work through these beginner resources:\n\n**Hands on Programming with R by Garrett Grolemund: [The Very Basics](https://jjallaire.github.io/hopr/basics.html)**. This covers getting started with RStudio, executing code from the console, writing functions, and working with scripts.\n\n**Spatial Data Science with applications in R by Edzer Pebesma & Roger Bivand: [R Basics](https://keen-swartz-3146c4.netlify.app/r-basics.html#r-basics).** This covers pipes (which we will use a lot in this workshop), data structures, and how to dissect the different parts and structure of spatial data in R.\n\nBoth of the above lessons cover beginner material that will be relevant for this workshop.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}